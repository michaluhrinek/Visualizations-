# -*- coding: utf-8 -*-
"""Visualizations(Matplotlib,Folium,Seaborn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sjV4gEbttlMncJ8mrBmhauQiHfDlqPfy

**"Renewable Energy Revolution: Analyzing Global Progress Through Data Visualization"**

loading dataset
"""

# Method 1: Using files.upload() - for smaller files
from google.colab import files
uploaded = files.upload()

# After uploading, you can read it based on file type, for example:
# For CSV:
import pandas as pd
df = pd.read_csv(next(iter(uploaded)))

# Get the filename of the uploaded file
filename = list(uploaded.keys())[0]

# Read the CSV file into a DataFrame
df = pd.read_csv(filename)

df.head(300)

"""Preprocessing data - analyzing missing values..."""

df.info()

df.describe()

# Display the number of missing values in each column
print(df.isnull().sum())

# Get the percentage of missing values in each column
print(df.isnull().sum() / len(df) * 100)

# Count the number of duplicate rows
duplicate_count = df.duplicated().sum()
print(f"Number of duplicate rows: {duplicate_count}")

# Display duplicate rows (if any)
print(df[df.duplicated(keep=False)])

df.dropna()

df.dtypes

"""Working with data"""

#import libraries
import pandas as pd
import numpy as np
!pip install matplotlib numpy
import matplotlib.pyplot as plt

# Generate some data (e.g., normally distributed data)
x = np.random.normal(0, 1, 1000)

# Create the histogram
plt.hist(x, 100)

# Set the title with a raw string to avoid issues with backslashes
plt.title(r'Normal distribution')

# Save the figure to a file
plt.savefig('matplotlib_histogram.png')

# Display the plot
plt.show()

"""plottting artist layer to use

You're creating plots in a web application or server environment
"""

from matplotlib.backends.backend_agg import FigureCanvasAgg
from matplotlib.figure import Figure

# Create a new figure
fig = Figure()

# Create a canvas for the figure
canvas = FigureCanvasAgg(fig)

# Add a subplot to the figure
ax = fig.add_subplot(111)

# Plot a point at (5, 5)
ax.plot(5, 5, '*')

# Save the figure to a file
canvas.print_figure('matplotlib_plot.png')

from IPython.display import display, Image
import matplotlib.pyplot as plt

# Create a new figure
fig = Figure()

# Create a canvas for the figure
canvas = FigureCanvasAgg(fig)

# Add a subplot to the figure
ax = fig.add_subplot(111)

# Plot a point at (5, 5)
ax.plot(5, 5, '*')

# Save the figure to a file
canvas.print_figure('matplotlib_plot.png')

# Display the saved image
display(Image(filename='matplotlib_plot.png'))

"""Visualizations"""

#import library
import seaborn as sns

# Plot renewable energy share for selected countries
countries = ['Afghanistan', 'Albania', 'United Kingdom','Slovakia','USA','China','Spain']
plt.figure(figsize=(12, 6))
for country in countries:
    country_data = df[df['Entity'] == country]
    plt.plot(country_data['Year'], country_data['Renewable energy share in the total final energy consumption (%)'], label=country)

plt.title('Renewable Energy Share Over Time')
plt.xlabel('Year')
plt.ylabel('Renewable Energy Share (%)')
plt.legend()
plt.show()

# Select a specific year for the bar chart
year = 2018

# Filter data for the selected year and countries
countries = ['Afghanistan', 'United Kingdom', 'Slovakia','Germany','Franece','Spain','Portugal','China']
data_for_chart = df[(df['Entity'].isin(countries)) & (df['Year'] == year)]

# Create the bar chart
plt.figure(figsize=(12, 6))
sns.barplot(x='Entity', y='Renewable energy share in the total final energy consumption (%)', data=data_for_chart)

plt.title(f'Renewable Energy Share in {year}')
plt.xlabel('Country')
plt.ylabel('Renewable Energy Share (%)')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.tight_layout()  # Adjust layout to prevent clipping of labels
plt.show()

# Create the pie chart
# setting up the value of the year
year = 2018
plt.figure(figsize=(10, 8))
plt.pie(data_for_chart['Renewable energy share in the total final energy consumption (%)'],
        labels=data_for_chart['Entity'],
        autopct='%1.1f%%',
        startangle=90,
        wedgeprops={'edgecolor': 'white'})

plt.title(f'Renewable Energy Share by Country in {year}')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.tight_layout()
plt.show()

#Distribution of Electricity Generation in Slovakia
sources = ['Nuclear', 'Hydro', 'Gas', 'Biofuels', 'Solar', 'Coal and Oil']
percentages = [62, 16, 8.56, 4.14, 2.57, 6.73]

plt.figure(figsize=(12, 6))
plt.bar(sources, percentages)
plt.title("Distribution of Electricity Generation in Slovakia (2023)")
plt.xlabel("Energy Source")
plt.ylabel("Percentage (%)")
plt.ylim(0, 70)

for i, v in enumerate(percentages):
    plt.text(i, v + 0.5, f'{v}%', ha='center')

plt.tight_layout()
plt.show()

#Distribution of the energy production in Slovakia over time
years = [2015, 2020, 2021, 2022, 2023]
nuclear = [52, 54, 52, 59.3, 62]
hydro = [15, 14, 15, 13.3, 16]
gas = [15, 13, 15, 7.8, 8.56]
coal = [7, 7, 7, 7.7, 2.73]
biofuels = [7, 8, 7, 5.6, 4.14]
solar = [2, 2, 2, 2.4, 2.57]

plt.figure(figsize=(12, 6))
plt.plot(years, nuclear, marker='o', label='Nuclear')
plt.plot(years, hydro, marker='s', label='Hydro')
plt.plot(years, gas, marker='^', label='Gas')
plt.plot(years, coal, marker='D', label='Coal')
plt.plot(years, biofuels, marker='*', label='Biofuels')
plt.plot(years, solar, marker='p', label='Solar')

plt.title("Evolution of Energy Sources in Slovakia (2015-2023)")
plt.xlabel("Year")
plt.ylabel("Share of Electricity Generation (%)")
plt.legend()
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

# Filter the data for Slovakia and the years 2018-2023
slovakia_data = df[(df['Entity'] == 'Slovakia') & (df['Year'].between(2018, 2023))]

# Create the line plot
plt.figure(figsize=(12, 6))

# List of energy sources to plot
energy_sources = [
    'Electricity from nuclear (TWh)',
    'Electricity from renewables (TWh)',  # This includes hydro, solar, biofuels, etc.
    'Electricity from fossil fuels (TWh)',  # This includes gas, coal, and oil
    'Electricity from gas (TWh)',
    'Electricity from coal (TWh)',
    'Electricity from biofuels (TWh)',
    'Electricity from oil (TWh)'
]

# Plot each energy source
for source in energy_sources:
    if source in slovakia_data.columns:
        plt.plot(slovakia_data['Year'], slovakia_data[source], marker='o', label=source.split(' ')[2] if len(source.split(' ')) > 2 else source)

plt.title("Evolution of Energy Sources in Slovakia (2018-2023)")
plt.xlabel("Year")
plt.ylabel("Electricity Generation (TWh)")
plt.legend()
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Print the data for verification
print(slovakia_data[['Year'] + [source for source in energy_sources if source in slovakia_data.columns]])

#Slovakia Renewable Energy Share over time
# Filter data for Slovakia
slovakia_data = df[df['Entity'] == 'Slovakia']

# Sort data by year
slovakia_data = slovakia_data.sort_values('Year')

# Create the line chart
plt.figure(figsize=(12, 6))
plt.plot(slovakia_data['Year'], slovakia_data['Renewable energy share in the total final energy consumption (%)'], marker='o')

plt.title("Slovakia's Renewable Energy Share Over Time")
plt.xlabel('Year')
plt.ylabel('Renewable Energy Share (%)')
plt.grid(True, linestyle='--', alpha=0.7)

# Improve x-axis readability
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Data for Slovakia's energy sources in 2023
sources = ['Nuclear', 'Hydro', 'Gas', 'Coal and Oil', 'Biofuels', 'Solar']
percentages = [62, 16, 8.56, 2.73, 4.14, 2.57]

plt.figure(figsize=(10, 6))
plt.scatter(sources, percentages, s=100, c=range(len(sources)), cmap='viridis')

plt.title("Distribution of Energy Sources in Slovakia (2023)")
plt.xlabel("Energy Source")
plt.ylabel("Share of Electricity Generation (%)")
plt.ylim(0, 70)

for i, txt in enumerate(percentages):
    plt.annotate(f'{txt}%', (sources[i], percentages[i]), xytext=(0, 5),
                 textcoords='offset points', ha='center', va='bottom')

plt.tight_layout()
plt.show()

# Hydroelectric Energy Production in Slovakia over time
years = [2015, 2020, 2021, 2022, 2023]
hydro_production = [15, 14, 15, 13.3, 16]

plt.figure(figsize=(10, 6))
plt.bar(years, hydro_production, width=0.8, color='skyblue', edgecolor='navy')

plt.title("Hydroelectric Energy Production in Slovakia (2015-2023)")
plt.xlabel("Year")
plt.ylabel("Share of Total Electricity Generation (%)")
plt.ylim(0, 20)

for i, v in enumerate(hydro_production):
    plt.text(years[i], v + 0.5, f'{v}%', ha='center', va='bottom')

plt.tight_layout()
plt.show()

import pandas as pd

def top_5_renewable_contributors(df):
    # Group by 'Entity' and get the maximum renewable energy share for each country
    max_renewable = df.groupby('Entity')['Renewable energy share in the total final energy consumption (%)'].max()

    # Sort in descending order and select top 5
    top_5 = max_renewable.sort_values(ascending=False).head(5)

    return top_5

# Call the function and display results
top_5_results = top_5_renewable_contributors(df)
print(top_5_results)

#Pie chart visualization of the energy production in Somalia
# Data for Somalia's energy mix
energy_types = ['Biomass and Waste', 'Solar and Wind', 'Oil Products']
percentages = [90.4, 5, 4.6]  # Estimated breakdown

# Colors for the pie chart
colors = ['#8fbc8f', '#ffd700', '#ff7f50']

# Create the pie chart
plt.figure(figsize=(10, 8))
plt.pie(percentages, labels=energy_types, colors=colors, autopct='%1.1f%%', startangle=140)
plt.title("Somalia's Energy Mix", fontsize=16)

# Add a circle at the center to make it a donut chart (optional)
centre_circle = plt.Circle((0,0), 0.30, fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)

# Equal aspect ratio ensures that pie is drawn as a circle
plt.axis('equal')
plt.tight_layout()
plt.show()

# Filter the data for the year 2018
df_2018 = df[df['Year'] == 2018]

# Sort by Renewable Energy Share in descending order and get top 20
top_20 = df_2018.sort_values('Renewable energy share in the total final energy consumption (%)', ascending=False).head(20)

# Create a bar chart
plt.figure(figsize=(12, 8))
plt.barh(top_20['Entity'], top_20['Renewable energy share in the total final energy consumption (%)'], color='skyblue')
plt.title('Top 20 Countries by Renewable Energy Share (%) in 2018', fontsize=16)
plt.xlabel('Renewable Energy Share (%)', fontsize=14)
plt.ylabel('Country', fontsize=14)

# Add value labels to each bar
for index, value in enumerate(top_20['Renewable energy share in the total final energy consumption (%)']):
    plt.text(value + 0.5, index, f'{value:.1f}%', va='center')

plt.xlim(0, 110)  # Set x-axis limit to accommodate labels
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Print the data for verification
print(top_20[['Entity', 'Renewable energy share in the total final energy consumption (%)']])

# Data for top 10 countries using hydroelectric energy in 2023
countries = ['China', 'Brazil', 'Canada', 'United States', 'Russia', 'Norway', 'India', 'Turkey', 'Japan', 'France']
hydro_generation = [1245.17, 431.28, 365.39, 254.79, 197.41, 139.23, 129.75, 85.22, 74.38, 63.58]

# Create a pie chart
plt.figure(figsize=(12, 8))
plt.pie(hydro_generation, labels=countries, autopct='%1.1f%%', startangle=90, colors=plt.cm.Pastel1(np.arange(len(countries))))
plt.title('Top 10 Countries by Hydroelectric Energy Generation in 2023')
plt.axis('equal')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Setting up the value of the year
year = 2018

# Filter the data for the specified year
data_for_year = df[df['Year'] == year]

# Sort and get top 10 countries by renewable energy share
data_for_chart = data_for_year.sort_values('Renewable energy share in the total final energy consumption (%)', ascending=False).head(10)

# Create the pie chart
plt.figure(figsize=(12, 8))
plt.pie(data_for_chart['Renewable energy share in the total final energy consumption (%)'],
        labels=data_for_chart['Entity'],
        autopct='%1.1f%%',
        startangle=90,
        wedgeprops={'edgecolor': 'white'})

plt.title(f'Top 10 Countries by Renewable Energy Share in {year}')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.tight_layout()
plt.show()

# Print the data for verification
print(data_for_chart[['Entity', 'Renewable energy share in the total final energy consumption (%)']])

import pandas as pd
import matplotlib.pyplot as plt

# Setting up the value of the year
year = 2018

# Filter the data for the specified year
data_for_year = df[df['Year'] == year]

# Sort and get top 10 countries by hydroelectric generation
data_for_chart = data_for_year.sort_values('Electricity from renewables (TWh)', ascending=False).head(10)

# Create the pie chart
plt.figure(figsize=(8, 8))
plt.pie(data_for_chart['Electricity from renewables (TWh)'],
        labels=data_for_chart['Entity'],
        autopct='%1.1f%%',
        startangle=90,
        wedgeprops={'edgecolor': 'white'})

plt.title(f'Top 10 Countries by Hydroelectric Generation in {year}')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.tight_layout()
plt.show()

# Print the data for verification
print(data_for_chart[['Entity', 'Electricity from renewables (TWh)']])

"""Working with a map"""

pip install folium

import folium
import pandas as pd

# Assuming 'df' contains the relevant data with columns 'Entity' for country names and 'Electricity from nuclear (TWh)' for nuclear power generation.
# Filter the DataFrame for countries with nuclear power production
nuclear_data = df[df['Electricity from nuclear (TWh)'] > 0]

# Create a base map centered around a global view
world_map = folium.Map(location=[20, 0], zoom_start=2)

# Add markers for each country with nuclear power production
for index, row in nuclear_data.iterrows():
    folium.Marker(
        location=[row['Latitude'], row['Longitude']],
        popup=f"{row['Entity']}: {row['Electricity from nuclear (TWh)']} TWh",
        icon=folium.Icon(color='blue', icon='bolt')
    ).add_to(world_map)

# Save the map to an HTML file
world_map.save("nuclear_power_map.html")

# Display the map in a Jupyter Notebook (if applicable)
world_map

# Assuming 'df' contains the relevant data with columns 'Entity' for country names,
# 'Electricity from renewables (TWh)' for total renewable power generation,
# and 'Latitude' and 'Longitude' for geographical coordinates.
# Filter the DataFrame for countries with hydroelectric generation
# Note: Replace 'Electricity from renewables (TWh)' with the actual column name for hydro generation if different.
hydro_data = df[df['Electricity from renewables (TWh)'] > 0]

# Create a base map centered around a global view
world_map = folium.Map(location=[20, 0], zoom_start=2)

# Add markers for each country with hydroelectric generation
for index, row in hydro_data.iterrows():
    # Assuming you have a specific column for hydro generation, replace if necessary
    hydro_generation = row['Electricity from renewables (TWh)']  # Adjust this if you have a specific column for hydro
    folium.Marker(
        location=[row['Latitude'], row['Longitude']],
        popup=f"{row['Entity']}: {hydro_generation} TWh",
        icon=folium.Icon(color='blue', icon='leaf')
    ).add_to(world_map)

# Save the map to an HTML file
world_map.save("hydro_power_map.html")

# Display the map in a Jupyter Notebook (if applicable)
world_map

#Renewable energy share in the total final energy consumption (%) by country for year 2018
import folium
import pandas as pd

# Assuming 'df' contains the relevant data with columns 'Entity' for country names,
# 'Renewable energy share in the total final energy consumption (%)' for investment percentage,
# and 'Latitude' and 'Longitude' for geographical coordinates.
# Filter the DataFrame for countries with renewable energy investment data for 2018
renewable_data_2018 = df[df['Year'] == 2018]

# Create a base map centered around a global view
world_map = folium.Map(location=[20, 0], zoom_start=2)

# Add markers for each country with renewable energy investment
for index, row in renewable_data_2018.iterrows():
    if row['Renewable energy share in the total final energy consumption (%)'] > 0:
        folium.Marker(
            location=[row['Latitude'], row['Longitude']],
            popup=f"{row['Entity']}: {row['Renewable energy share in the total final energy consumption (%)']}%",
            icon=folium.Icon(color='green', icon='leaf')
        ).add_to(world_map)

# Save the map to an HTML file
world_map.save("renewable_energy_investment_map_2018.html")

# Display the map in a Jupyter Notebook (if applicable)
world_map

"""Working with plotly - more interactive visualisations"""

#line chart with data over time
import plotly.express as px

# Filter data for Slovakia
slovakia_data = df[df['Entity'] == 'Slovakia']

# Create a line plot of renewable energy share over time
fig = px.line(slovakia_data,
              x='Year',
              y='Renewable energy share in the total final energy consumption (%)',
              title='Renewable Energy Share in Slovakia Over Time')

# Customize the layout
fig.update_layout(
    xaxis_title='Year',
    yaxis_title='Renewable Energy Share (%)',
    hovermode='x unified'
)

# Show the plot
fig.show()

#line chart
import plotly.graph_objects as go

# Filter data for Slovakia
slovakia_data = df[df['Entity'] == 'Slovakia']

# Create a figure with multiple traces
fig = go.Figure()

# Add trace for renewable energy
fig.add_trace(go.Scatter(
    x=slovakia_data['Year'],
    y=slovakia_data['Electricity from renewables (TWh)'],
    mode='lines+markers',
    name='Renewables'
))

# Add trace for nuclear energy
fig.add_trace(go.Scatter(
    x=slovakia_data['Year'],
    y=slovakia_data['Electricity from nuclear (TWh)'],
    mode='lines+markers',
    name='Nuclear'
))

# Add trace for fossil fuels
fig.add_trace(go.Scatter(
    x=slovakia_data['Year'],
    y=slovakia_data['Electricity from fossil fuels (TWh)'],
    mode='lines+markers',
    name='Fossil Fuels'
))

# Update layout
fig.update_layout(
    title='Electricity Generation by Source in Slovakia',
    xaxis_title='Year',
    yaxis_title='Electricity Generation (TWh)',
    hovermode='x unified'
)

# Show the plot
fig.show()

#bar chart
import plotly.express as px

# Assuming 'df' is your DataFrame containing Slovakia data
slovakia_data = df[df['Entity'] == 'Slovakia']

# Create a bar chart
fig = px.bar(slovakia_data,
             x='Year',
             y='Electricity from renewables (TWh)',
             title='Renewable Energy Generation in Slovakia')

# Customize the layout
fig.update_layout(
    xaxis_title='Year',
    yaxis_title='Electricity Generation (TWh)',
    bargap=0.2
)

# Show the plot
fig.show()

#creating bar chart with multiple bars representing difference source of energy for the exact year
import plotly.graph_objects as go

# Filter data for Slovakia
slovakia_data = df[df['Entity'] == 'Slovakia']

# Create a figure with multiple traces
fig = go.Figure()

# Add trace for renewable energy
fig.add_trace(go.Bar(
    x=slovakia_data['Year'],
    y=slovakia_data['Electricity from renewables (TWh)'],
    name='Renewables'
))

# Add trace for nuclear energy
fig.add_trace(go.Bar(
    x=slovakia_data['Year'],
    y=slovakia_data['Electricity from nuclear (TWh)'],
    name='Nuclear'
))

# Add trace for fossil fuels
fig.add_trace(go.Bar(
    x=slovakia_data['Year'],
    y=slovakia_data['Electricity from fossil fuels (TWh)'],
    name='Fossil Fuels'
))

# Update layout
fig.update_layout(
    title='Electricity Generation by Source in Slovakia',
    xaxis_title='Year',
    yaxis_title='Electricity Generation (TWh)',
    barmode='group'
)

# Show the plot
fig.show()

import plotly.express as px

# Sort the DataFrame by renewable energy share and select top 5 countries
top_5_countries = df.sort_values('Renewable energy share in the total final energy consumption (%)', ascending=False).drop_duplicates('Entity').head(5)

# Create the pie chart
fig = px.pie(top_5_countries,
             values='Renewable energy share in the total final energy consumption (%)',
             names='Entity',
             title='Top 5 Countries by Renewable Energy Share in Total Final Energy Consumption')

# Customize the layout
fig.update_traces(textposition='inside', textinfo='percent+label')
fig.update_layout(
    legend_title_text='Countries',
    uniformtext_minsize=12,
    uniformtext_mode='hide'
)

# Show the plot
fig.show()

#Creating ScatterPlot
# Sort the DataFrame by renewable energy share and select top 5 countries
top_5_countries = df.sort_values('Renewable energy share in the total final energy consumption (%)', ascending=False).drop_duplicates('Entity').head(5)

# Create the scatter plot
fig = px.scatter(top_5_countries,
                 x='gdp_per_capita',
                 y='Renewable energy share in the total final energy consumption (%)',
                 size='Primary energy consumption per capita (kWh/person)',
                 color='Entity',
                 hover_name='Entity',
                 text='Entity',
                 size_max=60,
                 title='Top 5 Countries by Renewable Energy Share vs GDP per Capita')

# Customize the layout
fig.update_traces(textposition='top center')
fig.update_layout(
    xaxis_title='GDP per Capita',
    yaxis_title='Renewable Energy Share (%)',
    legend_title='Country'
)

# Show the plot
fig.show()

#boxplot
# Filter data for Slovakia
slovakia_data = df[df['Entity'] == 'Slovakia']

# Create the boxplot
fig = px.box(slovakia_data,
             x='Year',
             y='Renewable energy share in the total final energy consumption (%)',
             title='Renewable Energy Share in Slovakia Over Time')

# Customize the layout
fig.update_layout(
    xaxis_title='Year',
    yaxis_title='Renewable Energy Share (%)',
    showlegend=False
)

# Show the plot
fig.show()

#Radar chart
import plotly.express as px

# Filter data for Slovakia
slovakia_data = df[df['Entity'] == 'Slovakia'].iloc[-1]  # Get the most recent year

# Select relevant features for the radar chart
features = ['Renewable energy share in the total final energy consumption (%)',
            'Low-carbon electricity (% electricity)',
            'Energy intensity level of primary energy (MJ/$2017 PPP GDP)',
            'Access to electricity (% of population)',
            'Access to clean fuels for cooking']

# Create a DataFrame for the radar chart
radar_data = pd.DataFrame(dict(
    r=slovakia_data[features].values,
    theta=features
))

# Create the radar chart
fig = px.line_polar(radar_data, r='r', theta='theta', line_close=True)

# Customize the layout
fig.update_traces(fill='toself')
fig.update_layout(
    title='Energy Profile of Slovakia',
    polar=dict(
        radialaxis=dict(visible=True, range=[0, 100])
    )
)

# Show the plot
fig.show()

import plotly.express as px

# Filter the data for the most recent year and remove any rows with missing values
recent_data = df[df['Year'] == df['Year'].max()].dropna(subset=['gdp_per_capita', 'Renewable energy share in the total final energy consumption (%)', 'Primary energy consumption per capita (kWh/person)'])

# Select top 30 countries by GDP per capita to reduce clutter
top_30_countries = recent_data.nlargest(30, 'gdp_per_capita')

# Create the bubble chart
fig = px.scatter(top_30_countries,
                 x='gdp_per_capita',
                 y='Renewable energy share in the total final energy consumption (%)',
                 size='Primary energy consumption per capita (kWh/person)',
                 color='Entity',
                 hover_name='Entity',
                 log_x=True,  # Use log scale for GDP per capita
                 size_max=60,  # Maximum size of bubbles
                 title='Top 30 Countries by GDP, Renewable Energy Share, and Energy Consumption')

# Highlight Slovakia if it's in the top 30
slovakia_data = top_30_countries[top_30_countries['Entity'] == 'Slovakia']
if not slovakia_data.empty:
    fig.add_trace(px.scatter(slovakia_data,
                             x='gdp_per_capita',
                             y='Renewable energy share in the total final energy consumption (%)',
                             size='Primary energy consumption per capita (kWh/person)',
                             color_discrete_sequence=['red'],
                             hover_name='Entity').data[0])

# Customize the layout
fig.update_layout(
    xaxis_title='GDP per Capita (log scale)',
    yaxis_title='Renewable Energy Share (%)',
    showlegend=True,
    legend_title_text='Countries'
)

# Show the plot
fig.show()

#Candle sticks chart
# Filter data for Slovakia
slovakia_data = df[df['Entity'] == 'Slovakia'].sort_values('Year')

# Create the candlestick chart
fig = go.Figure(data=[go.Candlestick(
    x=slovakia_data['Year'],
    open=slovakia_data['Electricity from fossil fuels (TWh)'],
    high=slovakia_data['Electricity from fossil fuels (TWh)'] + slovakia_data['Electricity from nuclear (TWh)'],
    low=slovakia_data['Electricity from renewables (TWh)'],
    close=slovakia_data['Electricity from renewables (TWh)'] + slovakia_data['Electricity from nuclear (TWh)']
)])

# Customize the layout
fig.update_layout(
    title='Energy Production in Slovakia',
    xaxis_title='Year',
    yaxis_title='Electricity Production (TWh)',
    xaxis_rangeslider_visible=False
)

# Show the plot
fig.show()

#Using Sankey diagram
import plotly.graph_objects as go
import pandas as pd

# Filter data for Slovakia and get the most recent year
slovakia_data = df[df['Entity'] == 'Slovakia'].sort_values('Year', ascending=False).iloc[0]

# Prepare data for Sankey diagram
label = ["Total Energy", "Fossil Fuels", "Nuclear", "Renewables", "Electricity Output"]
source = [0, 0, 0, 1, 2, 3]
target = [1, 2, 3, 4, 4, 4]
value = [
    slovakia_data['Electricity from fossil fuels (TWh)'],
    slovakia_data['Electricity from nuclear (TWh)'],
    slovakia_data['Electricity from renewables (TWh)'],
    slovakia_data['Electricity from fossil fuels (TWh)'],
    slovakia_data['Electricity from nuclear (TWh)'],
    slovakia_data['Electricity from renewables (TWh)']
]

# Create color scale
color_scale = ['#636EFA', '#EF553B', '#00CC96', '#AB63FA', '#FFA15A']

# Create the Sankey diagram
fig = go.Figure(data=[go.Sankey(
    node = dict(
      pad = 15,
      thickness = 20,
      line = dict(color = "black", width = 0.5),
      label = label,
      color = color_scale
    ),
    link = dict(
      source = source,
      target = target,
      value = value
  ))])

# Update the layout
fig.update_layout(
    title_text=f"Electricity Generation Flow in Slovakia (Year: {slovakia_data['Year']})",
    font_size=10
)

# Show the plot
fig.show()

#Using Treemap to visualize data
# Filter data for Slovakia and get the most recent year
slovakia_data = df[df['Entity'] == 'Slovakia'].sort_values('Year', ascending=False).iloc[0]

# Prepare data for Treemap
treemap_data = pd.DataFrame({
    'Energy Source': ['Total', 'Fossil Fuels', 'Nuclear', 'Renewables'],
    'Parent': ['', 'Total', 'Total', 'Total'],
    'Value': [
        slovakia_data['Electricity from fossil fuels (TWh)'] +
        slovakia_data['Electricity from nuclear (TWh)'] +
        slovakia_data['Electricity from renewables (TWh)'],
        slovakia_data['Electricity from fossil fuels (TWh)'],
        slovakia_data['Electricity from nuclear (TWh)'],
        slovakia_data['Electricity from renewables (TWh)']
    ]
})

# Create the Treemap
fig = px.treemap(treemap_data,
                 path=['Parent', 'Energy Source'],
                 values='Value',
                 title=f"Electricity Generation in Slovakia (Year: {slovakia_data['Year']})")

fig.update_traces(root_color="lightgrey")
fig.update_layout(margin=dict(t=50, l=25, r=25, b=25))

fig.show()

#Dot plot
# Extract relevant data for Slovakia
years = [2018, 2019, 2020, 2021, 2022]
electricity_generation = [27.15, 28.61, 29.02, 31.11, 28.3]

# Create the dot plot
fig = go.Figure()

fig.add_trace(go.Scatter(
    x=years,
    y=electricity_generation,
    mode='markers',
    marker=dict(
        size=10,
        color=electricity_generation,
        colorscale='Viridis',
        showscale=True
    ),
    text=[f'{y:.2f} TWh' for y in electricity_generation],
    hoverinfo='text+x'
))

# Customize the layout
fig.update_layout(
    title='Electricity Generation in Slovakia (2018-2022)',
    xaxis_title='Year',
    yaxis_title='Electricity Generation (TWh)',
    xaxis=dict(tickmode='linear'),
    yaxis=dict(range=[25, 32])
)

# Show the plot
fig.show()

#Area Plot
# Filter data for Slovakia
slovakia_data = df[df['Entity'] == 'Slovakia'].sort_values('Year')

# Create the filled area plot
fig = px.area(slovakia_data,
              x='Year',
              y=['Electricity from fossil fuels (TWh)',
                 'Electricity from nuclear (TWh)',
                 'Electricity from renewables (TWh)'],
              title='Electricity Generation in Slovakia by Source',
              labels={'value': 'Electricity Generation (TWh)', 'variable': 'Source'})

# Customize the layout
fig.update_layout(
    xaxis_title='Year',
    yaxis_title='Electricity Generation (TWh)',
    legend_title='Energy Source'
)

# Show the plot
fig.show()

#Horizontal bar chart
# Filter data for Slovakia and get the most recent year
slovakia_data = df[df['Entity'] == 'Slovakia'].sort_values('Year', ascending=False).iloc[0]

# Prepare data for horizontal bar chart
energy_sources = ['Fossil Fuels', 'Nuclear', 'Renewables']
values = [
    slovakia_data['Electricity from fossil fuels (TWh)'],
    slovakia_data['Electricity from nuclear (TWh)'],
    slovakia_data['Electricity from renewables (TWh)']
]

# Create the horizontal bar chart
fig = px.bar(
    x=values,
    y=energy_sources,
    orientation='h',
    title=f"Electricity Generation in Slovakia by Source (Year: {slovakia_data['Year']})"
)

# Customize the layout
fig.update_layout(
    xaxis_title='Electricity Generation (TWh)',
    yaxis_title='Energy Source'
)

# Show the plot
fig.show()

pip install --upgrade plotly

#Creating a chart with sliders
import plotly.graph_objects as go

# Assuming df is your DataFrame with Slovakia data
slovakia_data = df[df['Entity'] == 'Slovakia']

# Create the figure
fig = go.Figure()

# Add traces for different energy sources
fig.add_trace(go.Scatter(x=slovakia_data['Year'], y=slovakia_data['Electricity from fossil fuels (TWh)'], name='Fossil Fuels'))
fig.add_trace(go.Scatter(x=slovakia_data['Year'], y=slovakia_data['Electricity from nuclear (TWh)'], name='Nuclear'))
fig.add_trace(go.Scatter(x=slovakia_data['Year'], y=slovakia_data['Electricity from renewables (TWh)'], name='Renewables'))

# Update layout with slider
fig.update_layout(
    title='Energy Production in Slovakia Over Time',
    xaxis=dict(
        rangeslider=dict(visible=True),
        type='date'
    ),
    yaxis=dict(title='Electricity Production (TWh)'),
    hovermode='x unified'
)

# Show the plot
fig.show()

import pandas as pd
import plotly.graph_objects as go

# Filter data for Slovakia
slovakia_data = df[df['Entity'] == 'Slovakia']

# Create the figure
fig = go.Figure()

# Add traces for each energy source
fig.add_trace(go.Scatter(
    x=slovakia_data['Year'],
    y=slovakia_data['Electricity from fossil fuels (TWh)'],
    name='Fossil Fuels',
    visible=True  # Initially visible
))

fig.add_trace(go.Scatter(
    x=slovakia_data['Year'],
    y=slovakia_data['Electricity from nuclear (TWh)'],
    name='Nuclear',
    visible=False  # Initially hidden
))

fig.add_trace(go.Scatter(
    x=slovakia_data['Year'],
    y=slovakia_data['Electricity from renewables (TWh)'],
    name='Renewables',
    visible=False  # Initially hidden
))

# Update layout with dropdown menu
fig.update_layout(
    title='Energy Production in Slovakia',
    xaxis_title='Year',
    yaxis_title='Electricity Production (TWh)',
    updatemenus=[
        {
            'buttons': [
                {
                    'label': 'Fossil Fuels',
                    'method': 'update',
                    'args': [{'visible': [True, False, False]}, {'title': 'Fossil Fuels Production'}]
                },
                {
                    'label': 'Nuclear',
                    'method': 'update',
                    'args': [{'visible': [False, True, False]}, {'title': 'Nuclear Production'}]
                },
                {
                    'label': 'Renewables',
                    'method': 'update',
                    'args': [{'visible': [False, False, True]}, {'title': 'Renewable Production'}]
                },
                {
                    'label': 'All Sources',
                    'method': 'update',
                    'args': [{'visible': [True, True, True]}, {'title': 'Energy Production in Slovakia'}]
                }
            ],
            'direction': 'down',
            'showactive': True,
        }
    ]
)

# Show the plot
fig.show()

#Dropdown menu combined with a sidebar from previous code
# Filter data for Slovakia
slovakia_data = df[df['Entity'] == 'Slovakia']

# Create the figure
fig = go.Figure()

# Add traces for each energy source
fig.add_trace(go.Scatter(
    x=slovakia_data['Year'],
    y=slovakia_data['Electricity from fossil fuels (TWh)'],
    name='Fossil Fuels',
    visible=True  # Initially visible
))

fig.add_trace(go.Scatter(
    x=slovakia_data['Year'],
    y=slovakia_data['Electricity from nuclear (TWh)'],
    name='Nuclear',
    visible=False  # Initially hidden
))

fig.add_trace(go.Scatter(
    x=slovakia_data['Year'],
    y=slovakia_data['Electricity from renewables (TWh)'],
    name='Renewables',
    visible=False  # Initially hidden
))

# Update layout with dropdown menu and slider
fig.update_layout(
    title='Energy Production in Slovakia',
    xaxis_title='Year',
    yaxis_title='Electricity Production (TWh)',
    xaxis=dict(
        rangeslider=dict(visible=True),
        type='linear'  # Ensure it's a linear scale for years
    ),
    updatemenus=[
        {
            'buttons': [
                {
                    'label': 'Fossil Fuels',
                    'method': 'update',
                    'args': [{'visible': [True, False, False]}, {'title': 'Fossil Fuels Production'}]
                },
                {
                    'label': 'Nuclear',
                    'method': 'update',
                    'args': [{'visible': [False, True, False]}, {'title': 'Nuclear Production'}]
                },
                {
                    'label': 'Renewables',
                    'method': 'update',
                    'args': [{'visible': [False, False, True]}, {'title': 'Renewable Production'}]
                },
                {
                    'label': 'All Sources',
                    'method': 'update',
                    'args': [{'visible': [True, True, True]}, {'title': 'Energy Production in Slovakia'}]
                }
            ],
            'direction': 'down',
            'showactive': True,
        }
    ]
)

# Show the plot
fig.show()

# Create a scatter plot with a trend line
fig = px.scatter(
    df,
    x='Year',
    y='Electricity from renewables (TWh)',
    trendline='ols',  # Ordinary Least Squares regression for trend line
    title='Trend of Electricity from Renewables Over Years',
    labels={'Electricity from renewables (TWh)': 'Electricity from Renewables (TWh)', 'Year': 'Year'}
)

# Show the plot
fig.show()

#chart with a trendline

# Filter the DataFrame for Slovakia
slovakia_data = df[df['Entity'] == 'Slovakia']

# Create a scatter plot with trend lines for different energy types
fig = px.scatter(
    slovakia_data,
    x='Year',
    y='Electricity from renewables (TWh)',  # Change this to other columns as needed
    trendline='ols',  # Ordinary Least Squares regression for trend line
    title='Trend of Electricity from Renewables in Slovakia Over Years',
    labels={'Electricity from renewables (TWh)': 'Electricity from Renewables (TWh)', 'Year': 'Year'}
)

# Show the plot
fig.show()

# Parallel Coordinates Plot:
#The px.parallel_coordinates() function creates the plot.
#The color parameter is set to Renewable energy share in the total final energy consumption (%), allowing you to visualize how this variable changes across different years and energy types.
#The color_continuous_scale parameter sets the color gradient used for the lines.
# Filter the DataFrame for Slovakia
slovakia_data = df[df['Entity'] == 'Slovakia']

# Select relevant columns for the parallel coordinates plot
# Adjust the columns based on your interest and data availability
dimensions = [
    'Year',
    'Electricity from fossil fuels (TWh)',
    'Electricity from nuclear (TWh)',
    'Electricity from renewables (TWh)',
    'Renewable energy share in the total final energy consumption (%)',
    'gdp_per_capita'
]

# Create parallel coordinates plot
fig = px.parallel_coordinates(
    slovakia_data,
    dimensions=dimensions,
    color='Renewable energy share in the total final energy consumption (%)',  # Color by renewable share
    color_continuous_scale=px.colors.diverging.Tealrose,
    labels={
        'Electricity from fossil fuels (TWh)': 'Fossil Fuels (TWh)',
        'Electricity from nuclear (TWh)': 'Nuclear (TWh)',
        'Electricity from renewables (TWh)': 'Renewables (TWh)',
        'Renewable energy share in the total final energy consumption (%)': 'Renewable Share (%)',
        'gdp_per_capita': 'GDP per Capita'
    }
)

# Show the plot
fig.show()

#Working with Ridgeline charts
# Filter the DataFrame for Slovakia
slovakia_data = df[df['Entity'] == 'Slovakia']

# Select relevant columns for the ridgeline plot
# Here we will use 'Year' and 'Electricity from renewables (TWh)' as an example
years = slovakia_data['Year'].unique()
data_dict = {}

# Prepare data for ridgeline plot
for year in years:
    # Filter data for each year
    yearly_data = slovakia_data[slovakia_data['Year'] == year]['Electricity from renewables (TWh)']
    data_dict[year] = yearly_data

# Create a figure
fig = go.Figure()

# Add traces for each year's data
for year, values in data_dict.items():
    # Create a density trace for each year
    fig.add_trace(go.Violin(
        y=values,
        name=str(year),
        box_visible=True,
        line_color='blue',
        opacity=0.6,
        points='all',  # Show all points
        showlegend=True,
        scalegroup=str(year),  # Group by year to overlay them correctly
        spanmode='hard'
    ))

# Update layout to make it look like a ridgeline plot
fig.update_layout(
    title='Ridgeline Plot of Electricity from Renewables in Slovakia',
    yaxis_title='Electricity from Renewables (TWh)',
    xaxis_title='Year',
    yaxis=dict(zeroline=True),
    showlegend=True,
)

# Show the plot
fig.show()

#Plotly that combines multiple chart types
# Filter the DataFrame for Slovakia
slovakia_data = df[df['Entity'] == 'Slovakia']

# Create a bar chart for electricity generation from renewables
bar_chart = go.Bar(
    x=slovakia_data['Year'],
    y=slovakia_data['Electricity from renewables (TWh)'],
    name='Electricity from Renewables (TWh)',
    marker_color='blue'
)

# Create a line chart for GDP per capita
line_chart = go.Scatter(
    x=slovakia_data['Year'],
    y=slovakia_data['gdp_per_capita'],
    name='GDP per Capita',
    mode='lines+markers',
    marker=dict(color='red')
)

# Create a figure and add both charts
fig = go.Figure()

# Add bar and line charts to the figure
fig.add_trace(bar_chart)
fig.add_trace(line_chart)

# Update layout for better visualization
fig.update_layout(
    title='Electricity Generation and GDP per Capita in Slovakia',
    xaxis_title='Year',
    yaxis_title='Electricity (TWh) / GDP per Capita',
    legend_title='Metrics',
    yaxis=dict(title='Electricity from Renewables (TWh)', side='left', showgrid=True),
)

# Show the plot
fig.show()